/**
 * Amounts are descriptions of digital assets, answering the questions
 * "how much" and "of what kind". Amounts are values labeled with a brand. 
 * AmountMath executes the logic of how amounts are changed when digital 
 * assets are merged, separated, or otherwise manipulated. For
 * example, a deposit of 2 bucks into a purse that already has 3 bucks
 * gives a new purse balance of 5 bucks. An empty purse has 0 bucks. AmountMath 
 * relies heavily on polymorphic MathHelpers, which manipulate the unbranded
 * portion.
 */
struct Amount (Brand, Value) {
  brand :Brand;
  value :Value;
}

/**
 * Values describe the value of something that can be owned or shared.
 * Fungible values are normally represented by natural numbers. Other 
 * values may be represented as strings naming a particular right, or 
 * an arbitrary object that sensibly represents the rights at issue. 
 *
 * Value must be Comparable. (This IDL doesn't yet provide a way to specify
 * subtype relationships for structs.)
 */
struct Value {
}

/**
 * Logic for manipulating amounts.
 *
 * Amounts are the canonical description of tradable goods. They are manipulated
 * by issuers and mints, and represent the goods and currency carried by purses and
 * payments. They can be used to represent things like currency, stock, and the
 * abstract right to participate in a particular exchange.
 *
 */
interface AmountMath (Amount (Brand, Value)) {

  /** Return the brand. */
  getBrand() -> (Brand);

  /** 
   * Get the name of the mathHelpers used. This can be used as an
   * argument to `makeAmountMath` to create local amountMath.
   */
  getMathHelpersName -> (String);

  /**  Make an amount from a value by adding the brand. */
  make(allegedValue :Value) -> (Amount);

  /**
   * Make sure this amount is valid and return it if so.
   */
  coerce(allegedAmount :Amount) -> (Amount);

  /** Extract and return the value. */
  value(amount :Amount) -> (Value);

  /** Return the amount representing an empty amount. This is the
   * identity element for MathHelpers.add and MatHelpers.subtract.
   */
  getEmpty() -> (Amount);

  /** Return true if the Amount is empty. Otherwise false. */
  isEmpty(amount :Amount) -> (boolean);

  /**
   * Returns true if the leftAmount is greater than or equal to the
   * rightAmount. For non-scalars, "greater than or equal to" depends
   * on the kind of amount, as defined by the MathHelpers. For example,
   * whether rectangle A is greater than rectangle B depends on whether rectangle
   * A includes rectangle B as defined by the logic in MathHelpers.
  */
  isGTE(leftAmount :Amount, rightAmount :Amount) -> (boolean);

  /** 
   * Returns true if the leftAmount equals the rightAmount. We assume
   * that if isGTE is true in both directions, isEqual is also true 
   */
  isEqual(leftAmount :Amount, rightAmount :Amount) -> (boolean);

  /**
   * Returns a new amount that is the union of both leftAmount and rightAmount.
   *
   * For fungible amount this means adding the values. For other kinds of
   * amount, it usually means including all of the elements from both
   * left and right. 
   */
  add(leftAmount :Amount, rightAmount :Amount) -> (Amount);

  /**
  * Returns a new amount that is the leftAmount minus the rightAmount
  * (i.e. everything in the leftAmount that is not in the
  * rightAmount). If leftAmount doesn't include rightAmount
  * (subtraction results in a negative), throw  an error. Because the
  * left amount must include the right amount, this is NOT equivalent
  * to set subtraction.
  */
  subtract(leftAmount :Amount, rightAmount :Amount) -> (Amount);
}

/**
 * The brand identifies the kind of issuer, and has a function to get the
 * alleged name for the kind of asset described. The alleged name (such
 * as 'BTC' or 'moola') is provided by the maker of the issuer and should 
 * not be trusted as accurate.
 *
 * Every amount created by AmountMath will have the same brand, but recipients
 * cannot use the brand by itself to verify that a purported amount is
 * authentic, since the brand can be reused by a misbehaving issuer. 
 */
interface Brand ( ) {
  isMyIssuer (issuer :Issuer) -> (Boolean);
  getAllegedName ( ) -> (String);
}
