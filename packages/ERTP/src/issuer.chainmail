/**
 * The issuer cannot mint a new amount, but it can create empty purses and
 * payments. The issuer can also transform payments (splitting payments,
 * combining payments, burning payments, and claiming payments
 * exclusively). The issuer should be gotten from a trusted source and
 * then relied upon as the decider of whether an untrusted payment is valid. 
 */
interface Issuer (Amount (Value)) {
  /**
   * Get the Brand for this Issuer. The Brand indicates the kind of
   * digital asset and is shared by the mint, the issuer, and any purses
   * and payments of this particular kind. The brand is not closely
   * held, so this function should not be trusted to identify an issuer
   * alone. Fake digital assets and amount can use another issuer's brand.
   */
  getBrand() -> (Brand);

  /* Get the allegedName for this mint/issuer */
  getAllegedName() -> (allegedName);

  /* Get the AmountMath for this Issuer. */
  getAmountMath() -> (AmountMath);

  /* Get the name of the MathHelpers for this Issuer. */
  getMathHelpersName() -> (String);

  /** Make an empty purse of this brand. */
  makeEmptyPurse() -> (Purse);

  /**
   * Return true if the payment continues to exist.
   *
   * If the payment is a promise, the operation will proceed upon resolution.
   */
  isLive(payment :Payment) -> (boolean);

  /**
   * Get the amount of digital assets in the payment. Because the
   * payment is not trusted, we cannot call a method on it directly,
   * and must use the issuer instead.
   *
   * If the payment is a promise, the operation will proceed upon resolution.
   */
  getAmountOf(payment :Payment) -> (Amount);

  /**
   * Burn all of the digital assets in the payment. `optAmount` is optional.
   * If `optAmount` is present, the code will insist that the amount of
   * the digital assets in the payment is equal to `optAmount`, to 
   * prevent sending the wrong payment and other confusion.
   *
   * If the payment is a promise, the operation will proceed upon resolution.
   */
  burn(payment :Payment, optAmount :Amount) -> (Amount);

  /**
   * Transfer all digital assets from the payment to a new payment and
   * delete the original. `optAmount` is optional.
   * If `optAmount` is present, the code will insist that the amount of
   * digital assets in the payment is equal to `optAmount`, to prevent
   * sending the wrong  payment and other confusion.
   *
   * If the payment is a promise, the operation will proceed upon resolution.
   */
  claim(payment :Payment, optAmount :Amount)
    -> (Payment);

  /**
   * Combine multiple payments into one payment.
   *
   * If any of the payments is a promise, the operation will proceed upon
   * resolution.
   */
  combine(paymentsArray :List(Payment))
    -> (Payment);

  /** 
   * Split a single payment into two payments, A and B, according to the
   * paymentAmountA passed in. 
   *
   * If the payment is a promise, the operation will proceed upon resolution.
   */
  split(payment :Payment, paymentAmountA :Amount)
    -> (List(Payment));

  /** 
   * Split a single payment into many payments, according to the
   * amounts passed in. 
   *
   * If the payment is a promise, the operation will proceed upon resolution.
   */
  splitMany(payment :Payment, amounts :List(Amount))
    -> (List(Payment));

}

interface Brand {
  /**
   * The Brand indicates the kind of digital asset and is shared by
   * the mint, the issuer, and any purses and payments of this
   * particular kind. Fake digital assets and amount can use another 
   * issuer's brand. `brand.isMyIssuer` should be used with
   * `issuer.getBrand` to ensure an issuer and brand match. 
   */
  isMyIssuer(allegedIssuer) -> (boolean);
  getAllegedName() -> (string);
}

/**
 * Makes Issuers.
 *
 * The allegedName becomes part of the brand in asset descriptions. The
 * allegedName doesn't have to be a string, but it will only be used for
 * its value. The allegedName is useful for debugging and double-checking
 * assumptions, but should not be trusted. 
 * 
 * The mathHelpersName will be used to import a specific mathHelpers
 * from the mathHelpers library. For example, natMathHelpers, the
 * default, is used for basic fungible tokens.
 */
interface IssuerMaker {
  makeIssuerKit(
      allegedName :String,
      mathHelperName :String) -> (IssuerResults);
}

/**
 * The return value of makeIssuerKit
 */
struct IssuerResults ( ) {
  mint :Mint;
  issuer :Issuer;
  amountMath :AmountMath;
  brand :Brand;
}

/**
 * Holding a Mint carries the right to issue new digital assets. These
 * assets all have the same kind, which is called a Brand.
 */
interface Mint (Amount (Value)) {
  /** Get the Issuer for this mint. */
  getIssuer() -> (Issuer);

  /**
   * Create a new Payment containing newly minted amount. 
   */
  mintPayment(newAmount :Amount) -> (Payment);
}

/**
 * Purses hold amount of digital assets of the same brand, but unlike Payments, they are
 * not meant to be sent to others. To transfer digital assets, a
 * Payment should be withdrawn from a Purse. The amount of digital
 * assets in a purse can change through the action of deposit() and withdraw().
 *
 * The primary use for Purses and Payments is for currency-like and goods-like
 * digital assets, but they can also be used to represent other kinds of rights, such
 * as the right to participate in a particular contract.
 */
interface Purse (Amount) {

  /** Get the Issuer for this mint. */
  getIssuer() -> (Issuer);

  /** Get the amount contained in this purse, confirmed by the issuer. */
  getCurrentAmount() -> (Amount);

  /**
   * Deposit all the contents of payment into this purse, returning the
   * amount. If the optional argument `optAmount` does not equal the
   * amount of digital assets in the payment, throw an error.
   *
   * If payment is an unresolved promise, throw an error.
   */
  deposit(payment :Payment, optAmount :Amount) -> (Amount);

  /** Withdraw amount from this purse into a new Payment. */
  withdraw(amount :Amount) -> (Payment);
}

/**
 * Payments hold amount of digital assets of the same brand in transit. Payments can
 * be deposited in purses, split into multiple payments, combined, and
 * claimed (getting an exclusive payment). Payments are linear, meaning
 * that either a payment has the same amount of digital assets it
 * started with, or it is used up entirely. It is impossible to partially use a payment. 
 *
 * Payments are often received from other actors and therefore should
 * not be trusted themselves. To get the amount of digital assets in a payment, use the
 * trusted issuer: issuer.getAmountOf(payment),
 *
 * Payments can be converted to Purses by getting a trusted issuer and
 * calling `issuer.makeEmptyPurse()` to create a purse, then `purse.deposit(payment)`.
 */
interface Payment (Amount) {

  /** 
   * Get the allegedBrand, indicating the kind of digital asset this
   * payment purports to be, and which issuer to use. Because payments 
   * are not trusted, any method calls on payments should be treated
   * with suspicion and verified elsewhere.
   */ 
  getAllegedBrand() -> (Brand);
}

/** 
 * All of the difference in how digital asset amount are manipulated can be reduced to
 * the behavior of the math on values. We extract this
 * custom logic into mathHelpers. MathHelpers are about value
 * arithmetic, whereas AmountMath is about amounts, which are the
 * values labeled with a brand. AmountMath use mathHelpers to do their value arithmetic,
 * and then brand the results, making a new amount. 
 */ 
interface mathHelpers () {
  /** 
   * Check the kind of this value and throw if it is not the
   * expected kind. 
   */
  doCoerce(allegedValue :Value) -> (Value);

  /**
   * Get the representation for the identity element (often 0 or an
   * empty array)
   */
  doGetEmpty() -> (Value);

  /** Is the value the identity element? */
  doIsEmpty(value :Value) -> (boolean);

  /** Is the left greater than or equal to the right? */
  doIsGTE(left :Value, right :Value) -> (boolean);

  /** Does left equal right? */
  doIsEqual(left :Value, right :Value) -> (boolean);

  /** Return the left combined with the right */
  doAdd(left :Value, right :Value) -> (Value);

  /**
   * Return what remains after removing the right from the left. If
   * something in the right was not in the left, we throw an error.
   */
  doSubtract(left :Value, right :Value) -> (Value);
}
