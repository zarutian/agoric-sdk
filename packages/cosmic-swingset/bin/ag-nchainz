#! /bin/bash
# ag-nchainz - Agoric-specific nchainz scripts
#
# First run at least two Agoric chains:
# (https://github.com/iqlusioninc/relayer/tree/master/scripts/nchainz)
#
#   nchainz init agoric agoric
#   ag-nchainz start-solos
#
# or something.  See nchainz --help for more details.
set -e
progname=$(basename -- "$0")

trap 'kill $(jobs -p) 2>/dev/null' EXIT 

BASE_PORT=8000
NUM_SOLOS=1

get_alphabetic() {
  id="$1"
  ida=$(echo "$1" | sed -e 's/0/zero/g; s/1/one/g; s/2/two/g; s/3/three/g; s/4/four/g; s/5/five/g; s/6/six/g; s/7/seven/g; s/8/eight/g; s/9/nine/g;')
}

real0=$(readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")
thisdir=$(cd "$(dirname -- "$real0")" && pwd -P)

CLI=ag-cosmos-helper
DAEMON=ag-chain-cosmos
SOLO=$thisdir/ag-solo
SKIP=no
COMMAND=

while [[ $# -gt 0 ]]; do
  case $1 in
  -*)
    echo "unrecognized option \`$1'"
    exit 1
    ;;
  *)
    if [[ $SKIP == no && $1 == skip ]]; then
      SKIP=yes
      shift
    elif [[ -z $COMMAND ]]; then
      COMMAND=$1
      shift
      break;
    fi
    ;;
  esac
done

case $COMMAND in
testnet)
  chainid="$1"
  shift
  echo | $DAEMON testnet ${1+"$@"}
  n0d=$chainid/n0/$DAEMON
  i=$(echo $chainid | sed -e 's/^[^0-9]*//')
  portstart=$(( $BASE_PORT + $i * $NUM_SOLOS ))
  portend=$(( $portstart + $NUM_SOLOS - 1 ))
  for port in `seq $portstart $portend`; do
    echo "Initializing ag-solo in $chainid/ag-solo-$port"
		$SOLO init $chainid/ag-solo-$port --webport=$port
		$DAEMON add-genesis-account --home=$n0d \
      --home-client=$chainid/ag-solo-$port/$CLI-statedir --keyring-backend=test \
      ag-solo 1000uag
	done
	"$thisdir/../../agoric-cli/bin/agoric" set-defaults ag-chain-cosmos $n0d/config
  for node in `ls -d $chainid/n[1-9]* 2>/dev/null || true`; do
    cp $n0d/config/genesis.json $node/$DAEMON/config/genesis.json
	  "$thisdir/../../agoric-cli/bin/agoric" set-defaults ag-chain-cosmos $node/$DAEMON/config
  done
  exit 0
  ;;
start-daemon)
  if [[ $1 == '--debug' ]]; then
    debug=yes
    shift
  fi
  BASEDIR=$1
  shift
  ba=$($CLI --home "$BASEDIR/n0/$CLI" keys show n0 --keyring-backend=test | jq -r .address)
  for solo in `ls -d $BASEDIR/ag-solo-* 2>&1`; do
    cp -r "$BASEDIR/n0/$CLI/config" "$solo/$CLI-statedir/"
    ba="$ba $(cat $solo/ag-cosmos-helper-address)"
  done
  echo "Starting BOOT_ADDRESS=$ba $DAEMON ${1+"$@"}"
  if [[ $debug == yes ]]; then
    DEBUG=agoric ROLE=two_chain BOOT_ADDRESS=$ba node --inspect-brk $(which $DAEMON) ${1+"$@"}
  else
    DEBUG=agoric ROLE=two_chain BOOT_ADDRESS=$ba $DAEMON ${1+"$@"}
  fi
  exit 0
  ;;

start-solos)
  for solo in `ls -d nchainz/data/*/ag-solo-* 2>/dev/null`; do
    chainid=$(basename -- "$(dirname -- "$solo")")
    log="$(basename -- "$solo")-$chainid.log"
    if [[ -n $1 ]]; then
      case " $@ " in
      " $chainid ") ;;
      *) continue ;;
      esac
    fi
    echo "Logging to nchainz/logs/$log"
    (
      cd "$solo"
      n0d=../n0/$DAEMON

      # Now wire into the chain.
      gci=`$thisdir/../calc-gci.js $n0d/config/genesis.json`
      rpcport=`$thisdir/../calc-rpcport.js $n0d/config/config.toml`

      $SOLO set-gci-ingress --chainID="$chainid" "$gci" "$rpcport"

      DEBUG=agoric $SOLO start --role=two_client
    ) >>nchainz/logs/$log 2>&1 &
  done
  sleep 2
  echo "Waiting for all ${1+"$@ "}solos (Hit Control-C to exit)..."
  wait
  exit 0
  ;;
start-relayer)
  replace=no
  while [[ $# -gt 0 ]]; do
    case $1 in
    --replace)
      replace=yes
      shift
      ;;
    *)
      template=$1
      shift
      break
      ;;
    esac
  done
  BASE_RE='([^/]*)\.json$'

  echo "Reading path specification (Control-D to finish, Control-C to abort)..."
  tmpfile=$(mktemp ${TMPDIR-/tmp}/relayer-start.XXXXXX)
  trap "rm -f '$tmpfile'" EXIT
  cat > "$tmpfile"

  srccid=$(jq -r '.src["connection-id"]' "$tmpfile")
  if [[ $srccid == null ]]; then
    echo 1>&2 "You must specify .src[\"connection-id\"]"
    exit 1
  fi

  jqexpr=
  for fname in nchainz/config/*.json; do
    [[ -z $template || $fname == "nchainz/config/$template.json" ]] || continue
    [[ $fname =~ $BASE_RE ]] || continue
    if grep -q '"generator": "ag-nchainz"' "$fname"; then :
    else
      oldsrccid=$(jq -r '.src["connection-id"]' "$fname")
      olddstcid=$(jq -r '.dst["connection-id"]' "$fname")
      case "$oldsrccid:$olddstcid" in
      $srccid:*)
        # Forward order.
        jqexpr='.[0] * .[1]'
        template=${BASH_REMATCH[1]}
        break
        ;;
      *:$srccid)
        # Swapped order.
        jqexpr='{ src: .[0].dst, dst: .[0].src, strategy: .[0].strategy } * .[1]'
        template=${BASH_REMATCH[1]}
        break
        ;;
      esac
    fi
  done

  if [[ -z $jqexpr ]]; then
    if [[ -n $template ]]; then
      echo 1>&2 "Connection ID \`$srccid' is not defined in nchainz/config/$template.json"
    else
      echo 1>&2 "Connection ID \`$srccid' is not defined in nchainz/config/*.json"
    fi
    exit 1
  fi

  if [[ $replace == yes ]]; then
    # Overwrite existing path.
    echo "Replacing path \`$path'"
    path=$template
    jq -s "$jqexpr" \
      "nchainz/config/$template.json" "$tmpfile" > "nchainz/config/$path.json"
  else
    # Create a new path.
    i=0
    get_alphabetic $i
    while [[ -e "nchainz/config/$ida.json" ]]; do
      i=$(( $i + 1 ))
      get_alphabetic $i
    done
    path=$ida

    echo "Creating new path \`$path'"
    jq -s "$jqexpr"' * { "generator": "ag-nchainz" }' \
      "nchainz/config/$template.json" "$tmpfile" > "nchainz/config/$path.json"
  fi

  echo "$ rly config add-dir nchainz/config/"
  rly config add-dir nchainz/config/

  echo "$ rly start -d $path"
  rly start -d "$path" &
  try=0
  while ! rly tx link $path --timeout=3s -d >> "nchainz/logs/$path.log" 2>&1; do
    try=$(( $try + 1 ))
    echo "$path tx link not yet ready (try=$try)"
    sleep 1
  done
  try=$(( $try + 1 ))
  echo "$path tx link initialized (try=$try)"

  # Wait for the rly start command.
  wait
  ;;
*)
  echo 1>&2 "$progname: unrecognized command \`$COMMAND'"
  exit 1
  ;;
esac
