name: Test all Packages

# run CI on pushes to master, and on all PRs (even the ones that target other
# branches)

on:
 push:
   branches: [master]
 pull_request:

# set ESM_DISABLE_CACHE=true (will be JSON parsed)
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.14.1', '12.x', '14.x']
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: 'true'
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: cache node modules
      uses: actions/cache@v1
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # 'yarn install' must be done at the top level, to build all the
    # cross-package symlinks
    - name: yarn install
      run: yarn install
    - name: check dependencies
      run: yarn check-dependencies
    # 'yarn build' loops over all workspaces
    - name: yarn build
      run: yarn build

    - name: cache build outputs
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}

  lint:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.x']
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v1
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    - name: lint check
      run: yarn lint-check

  benchmark:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14.x']
    if: ${{github.event_name == 'push' && github.ref == 'refs/heads/master'}}
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v1
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    - name: benchmark changes
      env:
        AUTOBENCH_METRICS_URL: ${{ secrets.AUTOBENCH_METRICS_URL }}
      run: cd packages/swingset-runner && yarn ci:autobench
    - uses: actions/upload-artifact@v2
      with:
        name: benchmarkstats.json
        path: packages/swingset-runner/benchstats*.json

##################
# Fast-running tests run as a group:
  test-quick:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.14.1', '12.x', '14.x']
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # END-TEST-BOILERPLATE
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v1
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    # We run separate steps for each package, to make it easier to drill down
    # into errors. If we wanted to just run everything, run 'yarn test' from
    # the top level.
    #- name: yarn test (everything)
    #  run: yarn test
    - name: yarn test (acorn-eventual-send)
      run: cd packages/acorn-eventual-send && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (agoric-cli)
      run: cd packages/agoric-cli && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (assert)
      run: cd packages/assert && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (bundle-source)
      run: cd packages/bundle-source && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (captp)
      run: cd packages/captp && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (dapp-svelte-wallet/api)
      run: cd packages/dapp-svelte-wallet/api && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (deployment)
      run: cd packages/deployment && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (ERTP)
      run: cd packages/ERTP && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (eventual-send)
      run: cd packages/eventual-send && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (import-bundle)
      run: cd packages/import-bundle && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (import-manager)
      run: cd packages/import-manager && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (install-metering-and-ses)
      run: cd packages/install-metering-and-ses && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (install-ses)
      run: cd packages/install-ses && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (marshal)
      run: cd packages/marshal && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (notifier)
      run: cd packages/notifier && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (promise-kit)
      run: cd packages/promise-kit && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (registrar)
      run: cd packages/registrar && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (same-structure)
      run: cd packages/same-structure && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (sharing-service)
      run: cd packages/sharing-service && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (sparse-ints)
      run: cd packages/sparse-ints && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (spawner)
      run: cd packages/spawner && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (stat-logger)
      run: cd packages/stat-logger && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (store)
      run: cd packages/store && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (swing-store-lmdb)
      run: cd packages/swing-store-lmdb && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (swing-store-simple)
      run: cd packages/swing-store-simple && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (swingset-runner)
      run: cd packages/swingset-runner && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (tame-metering)
      run: cd packages/tame-metering && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (transform-eventual-send)
      run: cd packages/transform-eventual-send && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (transform-metering)
      run: cd packages/transform-metering && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (deploy-script-support)
      run: cd packages/deploy-script-support && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (ui-components)
      run: cd packages/ui-components && yarn test
      env:
        ESM_DISABLE_CACHE: true

##############
# Long-running tests are executed individually.
  test-cosmic-swingset:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.14.1', '12.x', '14.x']
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # END-TEST-BOILERPLATE
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v1
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    - name: Set up Go 1.15
      uses: actions/setup-go@v1
      with:
        go-version: 1.15
    - name: cache Go modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('packages/cosmic-swingset/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: yarn test (treasury)
      run: cd packages/treasury && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (cosmic-swingset)
      run: cd packages/cosmic-swingset && yarn test
      env:
        ESM_DISABLE_CACHE: true

  test-swingset:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.14.1', '12.x', '14.x']
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # END-TEST-BOILERPLATE
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v1
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    - name: yarn test (SwingSet)
      run: cd packages/SwingSet && yarn test
      env:
        ESM_DISABLE_CACHE: true
    - name: yarn test (xsnap)
      run: cd packages/xsnap && yarn test
      env:
        ESM_DISABLE_CACHE: true
    # explicitly test the XS worker, for visibility
    - name: yarn test (SwingSet XS Worker)
      run: cd packages/SwingSet && yarn test:xs-worker
      env:
        ESM_DISABLE_CACHE: true

  test-zoe:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.14.1', '12.x', '14.x']
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # END-TEST-BOILERPLATE
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v1
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    - name: yarn test (zoe)
      timeout-minutes: 20
      run: cd packages/zoe && yarn test
      env:
        ESM_DISABLE_CACHE: true

  test-xs:
    continue-on-error: true # XS failures won't block CI
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14.x']
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # END-TEST-BOILERPLATE
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v1
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    - name: yarn test (xs)
      timeout-minutes: 20
      run: yarn test:xs
      env:
        ESM_DISABLE_CACHE: true
